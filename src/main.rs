use teloxide::prelude::*;
use teloxide::types::Message;

async fn handle_new_members(bot: Bot, msg: Message) -> ResponseResult<()> {
    if let Some(new_members) = msg.new_chat_members() {
        for new_member in new_members {
            let username = new_member.username.as_ref()
                .map(|name| format!("@{name}"))
                .unwrap_or_else(|| {
                    format!("{} {}",
                            new_member.first_name,
                            new_member.last_name.as_deref().unwrap_or(""))
                });

            let group_name = msg.chat.title().unwrap_or("Unknown group");

            let welcome_message = format!(
                "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –≥—Ä—É–ø–∏, {username}! üåü\n\n\
                –ú–∏ —Ä–∞–¥—ñ –≤—ñ—Ç–∞—Ç–∏ –≤–∞—Å —Å–µ—Ä–µ–¥ –Ω–∞—Å. –û—Å—å –∫—ñ–ª—å–∫–∞ –ø–æ—Ä–∞–¥ –¥–ª—è –ø–æ—á–∞—Ç–∫—É:\n\n\
                1. –ü—Ä–µ–¥—Å—Ç–∞–≤—Ç–µ—Å—è: –†–æ–∑–∫–∞–∂—ñ—Ç—å –Ω–∞–º —Ç—Ä–æ—Ö–∏ –ø—Ä–æ —Å–µ–±–µ! –©–æ –ø—Ä–∏–≤–µ–ª–æ –≤–∞—Å —Å—é–¥–∏?\n\
                2. –ü—Ä–∞–≤–∏–ª–∞ –ì—Ä—É–ø–∏: –û–±–æ–≤'—è–∑–∫–æ–≤–æ –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–∏, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞—à—É —Å–ø—ñ–ª—å–Ω–æ—Ç—É –¥—Ä—É–∂–Ω—å–æ—é —Ç–∞ —à–∞–Ω–æ–±–ª–∏–≤–æ—é.\n\
                3. –ë–µ—Ä—ñ—Ç—å —É—á–∞—Å—Ç—å —Ç–∞ –≤–∑–∞—î–º–æ–¥—ñ–π—Ç–µ: –ù–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–∞–¥–∞–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è, –¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—ó–º–∏ –¥—É–º–∫–∞–º–∏ —Ç–∞ –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å –≤ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è—Ö.\n\n\
                –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è. –ú–∏ –≤—Å—ñ —Ç—É—Ç, —â–æ–± –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –æ–¥–∏–Ω –æ–¥–Ω–æ–º—É —Ä–æ—Å—Ç–∏ —Ç–∞ –¥–æ—Å—è–≥–∞—Ç–∏ —É—Å–ø—ñ—Ö—É!\n\n\
                –ù–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—å –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è–º —Ç—É—Ç!\n\n\
                –ó –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è–º–∏,\n\
                {group_name}"
            );

            bot.send_message(msg.chat.id, welcome_message).await?;
        }
    }

    Ok(())
}

#[tokio::main]
async fn main() {
    pretty_env_logger::init();
    log::info!("Starting greeter bot...");

    let bot = Bot::from_env();

    let handler = Update::filter_message().branch(
        dptree::filter(|msg: Message| msg.new_chat_members().is_some())
            .endpoint(handle_new_members)
    );

    Dispatcher::builder(bot, handler)
        .enable_ctrlc_handler()
        .build()
        .dispatch()
        .await;
}